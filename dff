console.log('Lets write JavaScript');

let currentSong = new Audio();
let songs;
let currFolder;

function secondsToMinutesSeconds(seconds) {
    if (isNaN(seconds) || seconds < 0) {
        return "00:00";
    }

    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);

    const formattedMinutes = String(minutes).padStart(2, '0');
    const formattedSeconds = String(remainingSeconds).padStart(2, '0');

    return `<span class="math-inline">\{formattedMinutes\}\:</span>{formattedSeconds}`;
}

// Function to get songs from the server
async function getSongs(folder) {
    currFolder = folder;
    let a = await fetch(`http://127.0.0.1:5500/songs/`); // Corrected to fetch from the specified folder
    let response = await a.text();
    let div = document.createElement("div");
    div.innerHTML = response;
    let as = div.getElementsByTagName("a");
    songs = [];
    for (let index = 0; index < as.length; index++) {
        const element = as[index];
        if (element.href.endsWith(".mp3")) {
            songs.push(element.href.split(`/songs/`)[1]); // Corrected to split based on the folder
        }
    }

    let songUL = document.querySelector(".songList").getElementsByTagName("ul")[0];
    songUL.innerHTML = "";
    for (const song of songs) {
        songUL.innerHTML = songUL.innerHTML + `<li><img class="invert" width="34" src="music.svg" alt="">
                            <div class="info">
                                <div> ${song.replaceAll("%20", " ")}</div>
                                <div>Harry</div>
                            </div>
                            <div class="playnow">
                                <span>Play Now</span>
                                <img class="invert" src="play.svg" alt="">
                            </div> </li>`;
    }

    // Attach an event listener to each song
    Array.from(document.querySelector(".songList").getElementsByTagName("li")).forEach(e => {
        e.addEventListener("click", element => {
            playMusic(e.querySelector(".info").firstElementChild.innerHTML.trim());
        });
    });

    return songs;
}

// Function to play music
const playMusic = (track, pause = false) => {
    currentSong.src = `/songs/` + track; // Corrected to use currFolder
    if (!pause) {
        currentSong.play();
        play.src = "pause.svg";
    }
    document.querySelector(".songinfo").innerHTML = decodeURI(track);
    document.querySelector(".songtime").innerHTML = "00:00 / 00:00";
};

async function displayAlbums() {
    console.log("displaying albums")
    let a = await fetch(`/songs/`)
    let response = await a.text();
    let div = document.createElement("div")
    div.innerHTML = response;
    let anchors = div.getElementsByTagName("a")
    let cardContainer = document.querySelector(".cardContainer")
    let array = Array.from(anchors)
    for (let index = 0; index < array.length; index++) {
        const e = array[index]; 
        if (e.href.includes("/songs") && !e.href.includes(".htaccess")) {
            let folder = e.href.split("/").slice(-2)[0]
            // Get the metadata of the folder
            let a = await fetch(`/songs/${songs}/info.json`)
            let response = await a.json(); 
            cardContainer.innerHTML = cardContainer.innerHTML + ` <div data-folder="${songs}" class="card">
            <div class="play">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none"
                    xmlns="http://www.w3.org/2000/svg">
                    <path d="M5 20V4L19 12L5 20Z" stroke="#141B34" fill="#000" stroke-width="1.5"
                        stroke-linejoin="round" />
                </svg>
            </div>

            <img src="/songs/${cover}/cover.jpg" alt="">
            <h2>${response.title}</h2>
            <p>${response.description}</p>
        </div>`
        }
    }

    // Load the playlist whenever card is clicked
    Array.from(document.getElementsByClassName("card")).forEach(e => { 
        e.addEventListener("click", async item => {
            console.log("Fetching Songs")
            songs = await getSongs(`songs/${item.currentTarget.dataset.folder}`)  
            playMusic(songs[0])

        })
    })
}


    async function main() {
        // Get the list of all the songs
        await getSongs("songs/ncs");
        playMusic(songs[0], true);

        // Display all the albums on the page
        await displayAlbums();

        // Attach an event listener to play, next and previous
        play.addEventListener("click", () => {
            if (currentSong.paused) {
                currentSong.play();
                play.src = "pause.svg";
            } else {
                currentSong.pause();
                play.src = "play.svg";
            }
        });

        // // Listen for timeupdate event
        // currentSong.addEventListener("timeupdate", () => {
        //     document.querySelector(".songtime").innerHTML = `${secondsToMinutesSeconds(currentSong.currentTime)} / ${secondsToMinutesSeconds(currentSong.duration)}`;
        //     document.querySelector(".circle").style.left = (currentSong.currentTime / currentSong.duration) * 100 + "%";
        // });

        // // Add an event listener to seekbar
        // document.querySelector(".seekbar").addEventListener("click", e => {
        //     let percent = (e.offsetX / e.target.getBoundingClientRect().width) * 100;
        //     document.querySelector(".circle").style.left = percent + "%";
        //     currentSong.currentTime = ((currentSong.duration) * percent) / 100;
        // });


         // Listen for timeupdate event
        currentSong.addEventListener("timeupdate", () => {
            document.querySelector(".songtime").innerHTML = `${secondsToMinutesSeconds(currentSong.currentTime)} / ${secondsToMinutesSeconds(currentSong.duration)}`;
            document.querySelector(".circle").style.left = (currentSong.currentTime / currentSong.duration) * 100 + "%";
        });

        // Add an event listener to seekbar
        document.querySelector(".seekbar").addEventListener("click", e => {
            if (!isNaN(currentSong.duration)) { // Check if duration is a valid number
                let percent = (e.offsetX / e.target.getBoundingClientRect().width) * 100;
                document.querySelector(".circle").style.left = percent + "%";
                currentSong.currentTime = ((currentSong.duration) * percent) / 100;
            }
        });
        
        currentSong.addEventListener("loadedmetadata", () => {
            document.querySelector(".songtime").innerHTML = `${secondsToMinutesSeconds(currentSong.currentTime)} / ${secondsToMinutesSeconds(currentSong.duration)}`;
        });

        // Add an event listener for hamburger
        document.querySelector(".hamburger").addEventListener("click", () => {
            document.querySelector(".left").style.left = "0";
        });

        // Add an event listener for close button
        document.querySelector(".close").addEventListener("click", () => {
            document.querySelector(".left").style.left = "-120%";
        });

        // Add an event listener to previous
        previous.addEventListener("click", () => {
            currentSong.pause();
            console.log("Previous clicked");
            let index = songs.indexOf(currentSong.src.split("/").slice(-1)[0]);
            if (index - 1 >= 0) {
                playMusic(songs[index - 1]);
            }
        });

        // Add an event listener to next
        next.addEventListener("click", () => {
            currentSong.pause();
            console.log("Next clicked");

            let index = songs.indexOf(currentSong.src.split("/").slice(-1)[0]);
            if (index + 1 < songs.length) {
                playMusic(songs[index + 1]);
            }
        });

        // Add an event to volume
        document.querySelector(".range").getElementsByTagName("input")[0].addEventListener("change", (e) => {
            console.log("Setting volume to", e.target.value, "/ 100");
            currentSong.volume = parseInt(e.target.value) / 100;
            if (currentSong.volume > 0) {
                document.querySelector(".volume>img").src = document.querySelector(".volume>img").src.replace("mute.svg", "volume.svg");
            }
        });

        // Add event listener to mute the track
        document.querySelector(".volume>img").addEventListener("click", e => {
            if (e.target.src.includes("volume.svg")) {
                e.target.src = e.target.src.replace("volume.svg", "mute.svg");
                currentSong.volume = 0;
                document.querySelector(".range").getElementsByTagName("input")[0].value = 0;
            } else {
                e.target.src = e.target.src.replace("mute.svg", "volume.svg");
                currentSong.volume = 0.10;
                document.querySelector(".range").getElementsByTagName("input")[0].value = 10;
            }
        });

    }


    // Function to display username if logged in
    function displayUsername() {
        const username = localStorage.getItem("username");
        if (username) {
            const userProfile = document.querySelector(".user-profile");
            userProfile.innerHTML = `<div class="user-circle">${username.charAt(0).toUpperCase()}</div><div class="user-name">${username}</div>`;
            const loginButton = document.querySelector(".loginbtn");
            const signupButton = document.querySelector(".signupbtn");
            if (loginButton && signupButton) {
                loginButton.style.display = "none";
                signupButton.style.display = "none";
            }
        }
    }




    // Call displayUsername on page load
    document.addEventListener("DOMContentLoaded", displayUsername);

    // Handle user signup
    document.addEventListener("DOMContentLoaded", () => {
        const signupForm = document.getElementById("signupForm");
        const loginForm = document.getElementById("loginForm");

        if (signupForm) {
            signupForm.addEventListener("submit", event => {
                event.preventDefault();
                const username = document.getElementById("username").value;
                const user = {
                    username: username,
                    email: document.getElementById("email").value,
                    password: document.getElementById("password").value
                };
                localStorage.setItem("user", JSON.stringify(user));
                localStorage.setItem("username", username);
                alert("Signup successful! Redirecting...");
                window.location.href = "index.html";
            });
        }

        // Handle user login
        if (loginForm) {
            loginForm.addEventListener("submit", event => {
                event.preventDefault();
                const storedUser = JSON.parse(localStorage.getItem("user"));
                const inputUsername = document.getElementById("loginUsername").value;
                const inputPassword = document.getElementById("loginPassword").value;

                if (storedUser && (inputUsername === storedUser.username || inputUsername === storedUser.email) && inputPassword === storedUser.password) {
                    localStorage.setItem("username", storedUser.username);
                    alert("Login successful! Redirecting...");
                    window.location.href = "index.html";
                } else {
                    alert("Invalid username or password.");
                }
            });
        }
    });


main()